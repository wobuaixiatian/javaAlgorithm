项目维护阶段，一天运维人员找到我们说，系统最近时不时出现MQ信息丢失和信息不接受的问题。系统重启才能解决问题。（所以说重启时万能大发）
当然不能总是重启项目。用户肯定会受不了。

既然都已经找到我们，那么当然要去看看到底是怎么会了。

下面梳理一下对日志等信息的分析过程。
首先是将当天的日志信息通过命令导出
cat catalina.out | grep '20xx-xx-xx' > log_xxxx.log
grep抓取的是定义的log里面的时间戳。

然后通过查看程序中的log信息，在日志中定位。
查出是哪一个线程出现了问题。比如说日志中显示Thread-1在执行任务后卡住了（这里只是假设一个，可能是其他问题）。

这样就可以确认具体问题是什么。

然后通过ps -ef | grep tomcat查找到进程Id，如42583，
这个就是项目启动的进程Id

接着使用jstack 42583> jstack_42583.log

将这个进程的线程情况都打印出来，为后面的分析做准备。

到这里我们就剩下分析了。

在上面我们已经知道是线程Thread-1出现问题，然后在获得的线程信息日志中，查找有关Thread-1的信息
"pool-1-thread-1" #135 prio=5 os_prio=0 tid=0x00007f0d0855d800 nid=0xaa90 in Object.wait() [0x00007f0ddd230000]
   java.lang.Thread.State: WAITING (on object monitor)
	at java.lang.Object.wait(Native Method)
	at java.lang.Object.wait(Object.java:502)
	at java.lang.UNIXProcess.waitFor(UNIXProcess.java:396)
	- locked <0x000000074f41f950> (a java.lang.UNIXProcess)
	at com.xx.ccm.xx.util.PigzZipUtils.unZipFile(PigzZipUtils.java:31)--可以看出是这里出现了问题，

最后到项目中找到对应的位置，分析代码逻辑。

这次遇到的问题是使用process执行linux命令时，缓冲区没有及时清空，导致阻塞。修改了一下程序逻辑。问题得到解决。

一次问题定位和分析的过程，分享一下。
