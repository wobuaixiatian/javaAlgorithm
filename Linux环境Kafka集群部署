Linux环境Kafka集群部署说明

Zookeeper集群搭建
Kafka集群是把状态保存在Zookeeper中的，首先要搭建Zookeeper集群。
1、软件环境
（3台服务器-我的测试）
xx  dd
xx  dd
xx  dd
 1、Linux服务器一台、三台、五台、（2*n+1），Zookeeper集群的工作是超过半数才能对外提供服务，3台中超过两台超过半数，允许1台挂掉 ，是否可以用偶数，其实没必要。
如果有四台那么挂掉一台还剩下三台服务器，如果在挂掉一个就不行了，这里记住是超过半数。
2、Java jdk1.8 zookeeper是用java写的所以他的需要JAVA环境，java是运行在java虚拟机上的
[root@HSH1000055852 bin]# java -version
java version "1.8.0_05"
Java(TM) SE Runtime Environment (build 1.8.0_05-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.5-b02, mixed mode)

3、Zookeeper的稳定版本Zookeeper 3.4.10版本 
下载地址: https://www.apache.org/dyn/closer.cgi/zookeeper/
2、配置&安装Zookeeper
下面的操作是：3台服务器统一操作
1、	安装Java

tar –zxvf jdk1.8.0_05.tar.gz –C /usr/java
编辑/etc/profile,添加如下参数
export JAVA_HOME=/usr/java/jdk1.8.0_05
export PATH=.:$JAVA_HOME/bin:$PATH
 然后 source /etc/profile


2、下载Zookeeper
首先要注意在生产环境中目录结构要定义好，防止在项目过多的时候找不到所需的项目
#目录统一放在/opt下面
#首先创建Zookeeper项目目录
mkdir zookeeper #项目目录
mkdir zkdata #存放快照日志
mkdir zkdatalog#存放事物日志
下载Zookeeper
 
#下载软件
cd /opt/zookeeper/

http://www-eu.apache.org/dist/zookeeper/stable/zookeeper-3.4.10.tar.gz

#解压软件
tar -zxvf zookeeper-3.4.10.tar.gz
 
3、修改配置文件
进入到解压好的目录里面的conf目录中，查看
 
#进入conf目录
/opt/zookeeper/zookeeper-3.4.10/conf
#查看
[root@HSH1000055852 conf]# ll
total 16
-rw-rw-r--. 1 1001 1001  535 Mar 23  2017 configuration.xsl
-rw-rw-r--. 1 1001 1001 2161 Mar 23  2017 log4j.properties
-rw-r--r--. 1 root root  229 Mar  6 11:03 zoo.cfg  
#zoo_sample.cfg  这个文件是官方给我们的zookeeper的样板文件，给他复制一份命名为zoo.cfg，zoo.cfg是官方指定的文件命名规则。
3台服务器的配置文件(选择端口前先确认端口是否被占用)
tickTime=2000
initLimit=10
syncLimit=5
dataDir=/opt/zookeeper/zkdata
dataLogDir=/opt/zookeeper/zkdatalog
clientPort=12181
server.1=xx:12888:13888
server.2=xx:12888:13888
server.3=xx:12888:13888
#server.1 这个1是服务器的标识也可以是其他的数字， 表示这个是第几号服务器，用来标识服务器，这个标识要写到快照目录下面myid文件里
#10.177.181.244为集群里的IP地址，第一个端口是master和slave之间的通信端口，默认是2888，第二个端口是leader选举的端口，集群刚启动的时候选举或者leader挂掉之后进行新的选举的端口默认是3888
 
配置文件解释：
 
#tickTime：
这个时间是作为 Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。
#initLimit：
这个配置项是用来配置 Zookeeper 接受客户端（这里所说的客户端不是用户连接 Zookeeper 服务器的客户端，而是 Zookeeper 服务器集群中连接到 Leader 的 Follower 服务器）初始化连接时最长能忍受多少个心跳时间间隔数。当已经超过 5个心跳的时间（也就是 tickTime）长度后 Zookeeper 服务器还没有收到客户端的返回信息，那么表明这个客户端连接失败。总的时间长度就是 5*2000=10 秒
#syncLimit：
这个配置项标识 Leader 与Follower 之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime 的时间长度，总的时间长度就是5*2000=10秒
#dataDir：
快照日志的存储路径
#dataLogDir：
事物日志的存储路径，如果不配置这个那么事物日志会默认存储到dataDir制定的目录，这样会严重影响zk的性能，当zk吞吐量较大的时候，产生的事物日志、快照日志太多
#clientPort：
这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。修改他的端口改大点
 
创建myid文件
拷贝/opt/zookeeper 到其他两个节点上面
#server1
echo "1" > /opt/zookeeper/zkdata/myid
#server2
echo "2" > /opt/zookeeper/zkdata/myid
#server3
echo "3" > /opt/zookeeper/zkdata/myid
 4、重要配置说明
1、myid文件和server.myid  在快照目录下存放的标识本台服务器的文件，他是整个zk集群用来发现彼此的一个重要标识。
2、zoo.cfg 文件是zookeeper配置文件 在conf目录里。
3、log4j.properties文件是zk的日志输出文件 在conf目录里用java写的程序基本上有个共同点日志都用log4j，来进行管理。
  configuration for log4j
4、zkEnv.sh和zkServer.sh文件
zkServer.sh 主的管理程序文件
zkEnv.sh 是主要配置，zookeeper集群启动时配置环境变量的文件
5、还有一个需要注意
ZooKeeper server will not remove old snapshots and log files when using the default configuration (see autopurge below), this is the responsibility of the operator
zookeeper不会主动的清除旧的快照和日志文件，这个是操作者的责任。
但是可以通过命令去定期的清理。
 
#!/bin/bash 
 
#snapshot file dir 
dataDir=/opt/zookeeper/zkdata/version-2
#tran log dir 
dataLogDir=/opt/zookeeper/zkdatalog/version-2

#Leave 66 files 
count=66 
count=$[$count+1] 
ls -t $dataLogDir/log.* | tail -n +$count | xargs rm -f 
ls -t $dataDir/snapshot.* | tail -n +$count | xargs rm -f 

#以上这个脚本定义了删除对应两个目录中的文件，保留最新的66个文件，可以将他写到crontab中，设置为每天凌晨2点执行一次就可以了。


#zk log dir   del the zookeeper log
#logDir=
#ls -t $logDir/zookeeper.log.* | tail -n +$count | xargs rm -f
 
其他方法：
第二种：使用ZK的工具类PurgeTxnLog，它的实现了一种简单的历史文件清理策略，可以在这里看一下他的使用方法 http://zookeeper.apache.org/doc/r3.4.10/zookeeperAdmin.html 
第三种：对于上面这个执行，ZK自己已经写好了脚本，在bin/zkCleanup.sh中，所以直接使用这个脚本也是可以执行清理工作的。
第四种：从3.4.0开始，zookeeper提供了自动清理snapshot和事务日志的功能，通过配置 autopurge.snapRetainCount 和 autopurge.purgeInterval 这两个参数能够实现定时清理了。这两个参数都是在zoo.cfg中配置的：
autopurge.purgeInterval  这个参数指定了清理频率，单位是小时，需要填写一个1或更大的整数，默认是0，表示不开启自己清理功能。
autopurge.snapRetainCount 这个参数和上面的参数搭配使用，这个参数指定了需要保留的文件数目。默认是保留3个。
 
推荐使用第一种方法，对于运维人员来说，将日志清理工作独立出来，便于统一管理也更可控。毕竟zk自带的一些工具并不怎么给力。
5、启动服务并查看
1、启动服务
#进入到Zookeeper的bin目录下
cd /opt/zookeeper/zookeeper-3.4.10/bin
#启动服务（3台都需要操作）
./zkServer.sh start
2、检查服务状态
#检查服务器状态
./zkServer.sh status
通过status就能看到状态：
[root@HSH1000055852 bin]# ./zkServer.sh status
ZooKeeper JMX enabled by default
Using config: /opt/zookeeper/zookeeper-3.4.10/bin/../conf/zoo.cfg
Mode: follower
zk集群一般只有一个leader，多个follower，主一般是相应客户端的读写请求，而从主同步数据，当主挂掉之后就会从follower里投票选举一个leader出来。
注：这里可能会出现问题，比如防火墙没有关闭等。解决方式参考
https://blog.csdn.net/weiyongle1996/article/details/73733228
可以用“jps”查看zk的进程，这个是zk的整个工程的main
#执行命令jps
20348 Jps
4233 QuorumPeerMain 

Kafka集群搭建
1、软件环境
1、linux一台或多台，大于等于2
2、已经搭建好的zookeeper集群
3、软件版本kafka_2.11-0.11.0.2.tgz

2、创建目录并下载安装软件
 
#创建目录
cd /opt/
mkdir kafka #创建项目目录
cd kafka
mkdir kafkalogs #创建kafka消息目录，主要存放kafka消息

#下载软件
https://www.apache.org/dyn/closer.cgi?path=/kafka/0.11.0.2/kafka_2.11-0.11.0.2.tgz
#解压软件
tar -zxvf kafka_2.11-0.9.0.1.tgz
 
3、修改配置文件
进入到config目录
cd /opt/kafka/kafka_2.11-0.11.0.2/config
主要关注：server.properties 这个文件即可，我们可以发现在目录下：
有很多文件，这里可以发现有Zookeeper文件，我们可以根据Kafka内带的zk集群来启动，但是建议使用独立的zk集群
 
-rw-r--r--. 1 root root  906 Nov 11 07:47 connect-console-sink.properties
-rw-r--r--. 1 root root  909 Nov 11 07:47 connect-console-source.properties
-rw-r--r--. 1 root root 5807 Nov 11 07:47 connect-distributed.properties
-rw-r--r--. 1 root root  883 Nov 11 07:47 connect-file-sink.properties
-rw-r--r--. 1 root root  881 Nov 11 07:47 connect-file-source.properties
-rw-r--r--. 1 root root 1111 Nov 11 07:47 connect-log4j.properties
-rw-r--r--. 1 root root 2730 Nov 11 07:47 connect-standalone.properties
-rw-r--r--. 1 root root 1199 Nov 11 07:47 consumer.properties
-rw-r--r--. 1 root root 4696 Nov 11 07:47 log4j.properties
-rw-r--r--. 1 root root 1900 Nov 11 07:47 producer.properties
-rw-r--r--. 1 root root 7152 Mar  6 11:42 server.properties
-rw-r--r--. 1 root root 1032 Nov 11 07:47 tools-log4j.properties
-rw-r--r--. 1 root root 1023 Nov 11 07:47 zookeeper.properties 
修改配置文件：
 
broker.id=1  #当前机器在集群中的唯一标识，和zookeeper的myid性质一样
port=9092 #当前kafka对外提供服务的端口默认是9092
host.name=xx #这个参数默认是关闭的，在0.8.1有个bug，DNS解析问题，失败率的问题。
num.network.threads=3 #这个是borker进行网络处理的线程数
num.io.threads=8 #这个是borker进行I/O处理的线程数
log.dirs=/opt/kafka/kafkalogs/ #消息存放的目录，这个目录可以配置为“，”逗号分割的表达式，上面的num.io.threads要大于这个目录的个数这个目录，如果配置多个目录，新创建的topic他把消息持久化的地方是，当前以逗号分割的目录中，那个分区数最少就放那一个
socket.send.buffer.bytes=102400 #发送缓冲区buffer大小，数据不是一下子就发送的，先回存储到缓冲区了到达一定的大小后在发送，能提高性能
socket.receive.buffer.bytes=102400 #kafka接收缓冲区大小，当数据到达一定大小后在序列化到磁盘
socket.request.max.bytes=104857600 #这个参数是向kafka请求消息或者向kafka发送消息的请请求的最大数，这个值不能超过java的堆栈大小
num.partitions=1 #默认的分区数，一个topic默认1个分区数
log.retention.hours=168 #默认消息的最大持久化时间，168小时，7天
message.max.byte=5242880  #消息保存的最大值5M
default.replication.factor=2  #kafka保存消息的副本数，如果一个副本失效了，另一个还可以继续提供服务
replica.fetch.max.bytes=5242880  #取消息的最大直接数
log.segment.bytes=1073741824 #这个参数是：因为kafka的消息是以追加的形式落地到文件，当超过这个值的时候，kafka会新起一个文件
log.retention.check.interval.ms=300000 #每隔300000毫秒去检查上面配置的log失效时间（log.retention.hours=168 ），到目录查看是否有过期的消息如果有，删除
log.cleaner.enable=false #是否启用log压缩，一般不用启用，启用的话可以提高性能
zookeeper.connect=xx:12181,xx:12181,xx:12181#设置zookeeper的连接端口
 
注意，这里如果希望在java中创建topic也是多个备份，需要添加一下属性
#default replication factors for automatically created topics，默认值1
default.replication.factor=3
#When a producer sets acks to "all" (or "-1"), this configuration specifies the minimum number of replicas that must acknowledge a write for the write to be considered successful.
#min.insync.replicas and acks allow you to enforce greater durability guarantees，默认值1
min.insync.replicas=3
 
上面是参数的解释，实际的修改项为：
 
#broker.id=0  每台服务器的broker.id都不能相同
broker.id=1

#hostname,服务器的ip
host.name=xx

#在log.retention.hours=168 下面新增下面三项
message.max.byte=5242880
default.replication.factor=2
replica.fetch.max.bytes=5242880

#设置zookeeper的连接端口
zookeeper.connect=xx:12181,xx:12181,xx:12181 
注意：拷贝文件过去的其他两个节点需要更改broker.id和host.name
4、启动Kafka集群并测试
1、启动服务
#从后台启动Kafka集群（3台都需要启动）
cd
/opt/kafka/kafka_2.11-0.11.0.2/bin #进入到kafka的bin目录 
./kafka-server-start.sh -daemon ../config/server.properties
2、检查服务是否启动
#执行命令jps
20348 Jps
4233 QuorumPeerMain
18991 Kafka
3、创建Topic来验证是否创建成功
更多请看官方文档：http://kafka.apache.org/documentation.html
 
#创建Topic
./kafka-topics.sh --create --zookeeper xx:12181,xx:12181,xx:12181 --replication-factor 2 --partitions 1 --topic test 
#解释
--replication-factor 2   #复制两份
--partitions 1 #创建1个分区
--topic #主题为test

'''在一台服务器上创建一个生产者'''
#创建一个broker，发布者
./kafka-console-producer.sh --broker-list xx:9092,xx:9092,xx:9092 --topic test

'''在一台服务器上创建一个消费者'''
./kafka-console-consumer.sh --zookeeper xx:12181,xx:12181,xx:12181 --topic test --from-beginning  
测试（在生产者那里发布消息,在消费者那里是否能正常收到）：
生产者发消息：
 
消费者收消息
 
4、其他命令
大部分命令可以去官方文档查看
4.1、查看topic
./kafka-topics.sh --list --zookeeper localhost:12181
#就会显示我们创建的所有topic
4.2、查看topic状态
 
./kafka-topics.sh --describe --zookeeper localhost:12181 --topic test
#下面是显示信息
Topic:test      PartitionCount:1        ReplicationFactor:2     Configs:
        Topic: test     Partition: 0    Leader: 1       Replicas: 1,3   Isr: 1,3
#分区为为1  复制因子为2   他的  test的分区为0 
#Replicas: 1,3   复制的为1,3
# 
 
 OKkafka集群搭建完毕
5、其他说明标注
5.1、日志说明
默认kafka的日志是保存在/opt/kafka/kafka_2.11-0.11.0.2/logs目录下的，这里说几个需要注意的日志
server.log #kafka的运行日志
state-change.log  #kafka他是用zookeeper来保存状态，所以他可能会进行切换，切换的日志就保存在这里

controller.log #kafka选择一个节点作为“controller”,当发现有节点down掉的时候它负责在游泳分区的所有节点中选择新的leader,这使得Kafka可以批量的高效的管理所有分区节点的主从关系。如果controller down掉了，活着的节点中的一个会备切换为新的controller.

