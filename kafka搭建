https://blog.csdn.net/WeiJonathan/article/details/18075967
KafKa安装部署

https://www.cnblogs.com/qizhelongdeyang/p/7354183.html
Apache Kafka系列(三) Java API使用

https://www.cnblogs.com/luckygxf/p/7072691.html
Kafka入门教程


https://www.ibm.com/developerworks/cn/opensource/os-cn-zookeeper/index.html

zookeeper基础介绍


maven：
    <dependency>
        <groupId>org.apache.kafka</groupId>
        <artifactId>kafka-clients</artifactId>
        <version>0.8.2.0</version>
    </dependency>
    <dependency>
        <groupId>org.apache.kafka</groupId>
        <artifactId>kafka_2.11</artifactId>
        <version>0.8.2.0</version>
    </dependency>
consumer代码：
package com.roncoo.example.kafka;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import kafka.consumer.ConsumerConfig;
import kafka.consumer.ConsumerIterator;
import kafka.consumer.KafkaStream;
import kafka.javaapi.consumer.ConsumerConnector;
import kafka.serializer.StringDecoder;
import kafka.utils.VerifiableProperties;


public class ConsumerDemo {
    private final ConsumerConnector consumer;
    private ConsumerDemo() {
        Properties props = new Properties();
          //zookeeper 配置
//        props.put("zookeeper.connect", "xxx.xxx.xxx.xxx:2181");
        props.put("zookeeper.connect", "xxx.xx.xxx.xxx:2181");

        //group 代表一个消费组
        props.put("group.id", "jd-group");

        //zk连接超时
        props.put("zookeeper.session.timeout.ms", "4000");
        props.put("zookeeper.sync.time.ms", "200");
        props.put("auto.commit.interval.ms", "1000");
        props.put("auto.offset.reset", "smallest");
        //序列化类
        props.put("serializer.class", "kafka.serializer.StringEncoder");

        ConsumerConfig config = new ConsumerConfig(props);

        consumer = kafka.consumer.Consumer.createJavaConsumerConnector(config);
    }
    
    void consume() {
        Map<String, Integer> topicCountMap = new HashMap<String, Integer>();
        topicCountMap.put("test", new Integer(1));

        StringDecoder keyDecoder = new StringDecoder(new VerifiableProperties());
        StringDecoder valueDecoder = new StringDecoder(new VerifiableProperties());

        Map<String, List<KafkaStream<String, String>>> consumerMap = 
                consumer.createMessageStreams(topicCountMap,keyDecoder,valueDecoder);
        KafkaStream<String, String> stream = consumerMap.get("test").get(0);
        ConsumerIterator<String, String> it = stream.iterator();
        while (it.hasNext()){
            String message = it.next().message();
            System.out.println(message);
            try {
                Thread.sleep(2000);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
        }
    }

    public static void main(String[] args) {
        new ConsumerDemo().consume();
    }
}
producer代码：
package com.roncoo.example.kafka;

import java.io.UnsupportedEncodingException;
import java.util.Properties;

import kafka.javaapi.producer.Producer;
import kafka.producer.KeyedMessage;
import kafka.producer.ProducerConfig;

public class ProducerDemoOld {
    private final Producer<String, String> producer;
    public final static String TOPIC = "test";
    private ProducerDemoOld(){
           Properties props = new Properties();
         //此处配置的是kafka的端口
           props.put("metadata.broker.list", "xx.x.x.x:9092");
//         props.put("metadata.broker.list", "xx.xx.x.xx:9092");
           //配置value的序列化类
           props.put("serializer.class", "kafka.serializer.StringEncoder");
           //配置key的序列化类
           props.put("key.serializer.class", "kafka.serializer.StringEncoder");
           
           props.put("request.required.acks","-1");

           producer = new Producer<String, String>(new ProducerConfig(props));
    }
    void produce() throws UnsupportedEncodingException {
//         JSONObject order = new JSONObject();
//         try {
//             order.put("aid", "123");
//             order.put("caseVersion","3");
//             order.put("xmlVersion", "3");
//         } catch (JSONException e) {
//             e.printStackTrace();
//         }
//         producer.send(new KeyedMessage<String, String>(TOPIC, "" ,order.toString()));
           
           int messageNo = 10;
           final int COUNT = 20;
           while (messageNo < COUNT) {
               String key = String.valueOf(messageNo);
             String data = "中文hello kafka message " + key;
//             System.out.println(data);
//             producer.send(new KeyedMessage<String, String>(TOPIC, key ,data));
               System.out.println(data.toString());
               producer.send(new KeyedMessage<String, String>("test", key ,data));
               messageNo ++;
           }
       }
    
    public static void main( String[] args ) throws UnsupportedEncodingException
       {
        new ProducerDemoOld().produce();
       }
}

